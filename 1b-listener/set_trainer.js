// listeners/interactionCreate.js (ho·∫∑c nh√©t th·∫≥ng v√†o index.js c·ªßa b·∫°n)
const { Events, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
// N·∫øu file command export TRAINER_OPTIONS, b·∫°n c√≥ th·ªÉ require ƒë·ªÉ d√πng chung:
const { TRAINER_OPTIONS } = require('../1-commands/1c-settrainer'); // ƒë∆∞·ªùng d·∫´n tu·ª≥ d·ª± √°n
const { serverBroadcast } = require('../websocket')
const game = require('../3-model/game'); // <-- import game object
const { addTag, deleteMessage } = require('../utils'); // <-- import h√†m addTag
module.exports = (client) => {
  client.on(Events.InteractionCreate, async (interaction) => {
    try {
      // X·ª≠ l√Ω select menu
      if (interaction.isStringSelectMenu() && interaction.customId.startsWith('trainer_select')) {
        const [, trainerNumberRaw] = interaction.customId.split('::');
        const trainerNumber = Number(trainerNumberRaw) || null;

        const selectedValue = interaction.values[0];
        const picked = TRAINER_OPTIONS.find(o => o.value === selectedValue);

        if (!picked) {
          return interaction.reply({ content: '‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.', ephemeral: true });
        }

        // (Tu·ª≥ ch·ªçn) disable menu sau khi ch·ªçn:
        const disabledMenu = StringSelectMenuBuilder.from(interaction.component).setDisabled(true);
        const disabledRow = new ActionRowBuilder().addComponents(disabledMenu);

        // update message ch·ª©a menu (n·∫øu c√≥ quy·ªÅn)
        if (interaction.message?.editable) {
          await interaction.update({ components: [disabledRow] });
        } else {
          await interaction.deferUpdate().catch(() => { });
        }
        //Send websocket
        game.setQueryCommand({
          action: 'set_trainer',
          player_id: trainerNumber,
          type: picked.label, // T√™n user
          type_id: '', // Id c·ªßa type  skill th√¨ l√† id c·ªßa skill, item th√¨ l√† id c·ªßa item, swap th√¨ l√† id c·ªßa vtumon 
          target_id: '' // Id c·ªßa ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u (n·∫øu c√≥), v√≠ d·ª•: id c·ªßa vtumon ƒë·ªëi th·ªß khi swap
        })
        serverBroadcast(JSON.stringify(game.query_command))
        game.resetQueryCommand() // Reset query sau khi g·ª≠i
        //end send websocket
        // G·ª≠i x√°c nh·∫≠n
        global.set_trainer_interaction = interaction
        // // Xo√° message menu ngay sau khi xong
        // if (interaction.message?.deletable) {
        //   await interaction.message.delete().catch(() => { });
        // } else if (interaction.message?.editable) {
        //   // Fallback n·∫øu kh√¥ng xo√° ƒë∆∞·ª£c (thi·∫øu quy·ªÅn Manage Messages)
        //   await interaction.message.edit({ content: '‚úÖ (ƒê√£ x·ª≠ l√Ω)', components: [] }).catch(() => { });
        // }
        // deleteMessage(interaction)
        await interaction.message.channel.send({
          content: `üèÜ Qu·∫£n tr√≤ ƒë√£ ch·ªçn Trainer **${picked.label}** (s·ªë: ${trainerNumber ?? 'N/A'}) cho ${trainerNumber == 1 ? addTag(game.player1.id) : addTag(game.player2.id)}\n> ${picked.description}`,
        });

        // (Tu·ª≥ ch·ªçn) L∆∞u l·∫°i l·ª±a ch·ªçn v√†o DB/b·ªô nh·ªõ t·∫°m:
        // saveUserTrainer(interaction.user.id, { number: trainerNumber, trainer: picked.value });

        return;
      }
    } catch (err) {
      console.error('interactionCreate error:', err);
      if (!interaction.replied) {
        interaction.reply({ content: '‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn.', ephemeral: true }).catch(() => { });
      }
    }
  });
};
