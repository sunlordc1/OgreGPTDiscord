require('dotenv').config();
const fs = require('fs');
const { Client, Collection, GatewayIntentBits } = require('discord.js');
const game = require('./3-model/game'); // <-- import game object
const { addTag } = require('./utils'); // <-- import h√†m addTag
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions // <-- Th√™m d√≤ng n√†y
  ]
});

client.commands = new Collection();
client.prefixCommands = new Collection();

const prefix = '!'; // c·∫≠u c√≥ th·ªÉ thay prefix n√® üçì

// Load Slash Commands
const commandFiles = fs.readdirSync('./1-commands');
for (const file of commandFiles) {
  const command = require(`./1-commands/${file}`);
  client.commands.set(command.data.name, command);
}

// Load Prefix Commands
const prefixFiles = fs.readdirSync('./2-prefixCommands');
for (const file of prefixFiles) {
  const command = require(`./2-prefixCommands/${file}`);
  client.prefixCommands.set(command.name, command);
}

// Slash command interaction
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;
  const command = client.commands.get(interaction.commandName);
  if (!command) return;
  try {
    await command.execute(interaction);
  } catch (error) {
    console.error(error);
    await interaction.reply({ content: 'Oops! C√≥ l·ªói r·ªìi üòµ‚Äçüí´', ephemeral: true });
  }
});

// Prefix command handler
client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;
  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const cmdName = args.shift().toLowerCase();
  const command = client.prefixCommands.get(cmdName);
  if (!command) return;
  try {
    command.execute(message, args);
  } catch (err) {
    console.error(err);
    message.reply('C√≥ l·ªói x·∫£y ra r·ªìi üò•');
  }
});

client.on('messageReactionAdd', async (reaction, user) => {
  if (!game.isPlayer(user.id)) return; // Ch·ªâ x·ª≠ l√Ω n·∫øu ng∆∞·ªùi d√πng l√† player

  if (
    global.activePollId &&
    reaction.message.id === global.activePollId &&
    !global.pollClosed &&
    !user.bot
    && game.isTurnOfPlayer(user.id) // Ch·ªâ x·ª≠ l√Ω n·∫øu l√† l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i
  ) {
    global.pollClosed = true;
    let isDeletePoll = true;
    let item = null
    let item_list = game.getItemOfPlayer(user.id); // <-- L·∫•y item c·ªßa ng∆∞·ªùi ch∆°i
    let vtumon_list = game.getItemOfPlayer(user.id); // <-- L·∫•y item c·ªßa ng∆∞·ªùi ch∆°i
    // L·∫•y l·∫°i pollMessage t·ª´ id
    switch (reaction.emoji.name) {
      // Actions reactions
      // üçé Skip, üçå Skills, üçá Items, üçâ  Swap 
      case 'üçé': // Skip my turn
        await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ ch·ªçn Skip! üçé`);
        break;
      case 'üçå': //Skill list of Vtumon
        await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ ch·ªçn Skills! üçå`);
        break;
      case 'üçá': //Item List
        isDeletePoll = false;
        global.pollClosed = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i pollClosed
        try {
          if (reaction.message.deletable) {
            await reaction.message.delete();
            // console.log('ƒê√£ x√≥a poll!');
          } else {
            console.warn('Kh√¥ng th·ªÉ x√≥a pollMessage: Kh√¥ng c√≥ quy·ªÅn ho·∫∑c kh√¥ng h·ª£p l·ªá.');
          }
        } catch (error) {
          console.error('L·ªói khi x√≥a poll:', error);
        }
        if (!item_list || item_list.length === 0) {
          await reaction.message.channel.send(`${addTag(user.id)}, b·∫°n kh√¥ng c√≥ item n√†o! üçá`);
          return; // Kh√¥ng c√≥ item n√†o ƒë·ªÉ ch·ªçn
        }
        let ct = '';
        let n = 0;
        for (const i of item_list) {
          ct += `\n${game.item_icons[n]} ${i.name} (${i.used ? 'ƒê√£ d√πng' : 'Ch∆∞a d√πng'})`;
          n++;
        }
        const pollMessage = await reaction.message.channel.send({
          content: `${addTag(user.id)}, b·∫°n ch·ªçn item n√†o?${ct}`,
          fetchReply: true
        });
        n = 0;
        for (const i of item_list) {
          await pollMessage.react(game.item_icons[n]);
          n++;
        }
        await pollMessage.react('‚ùå'); // Close poll
        // L∆∞u pollMessage.id v√†o bi·∫øn to√†n c·ª•c
        global.activePollId = pollMessage.id;
        global.pollClosed = false;
        // await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ ch·ªçn Items! üçá`);
        break;
      case 'üçâ': // Swap vtumon
        await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ ch·ªçn Swap! üçâ`);
        break;

      // Item List reactions
      case 'üçè': // Item Index 0
        console.log("Item Index s·ªë " + game.getIconItemToId(reaction.emoji.name));
        item = game.getItemOfPlayerByIndex(user.id, game.getIconItemToId(reaction.emoji.name)); // <-- L·∫•y ID c·ªßa item t·ª´ icon
        // API check item ƒë·∫∑c th√π
        break;
      case 'üçê': // Item Index 1
        console.log("Item Index s·ªë " + game.getIconItemToId(reaction.emoji.name));
        item = game.getItemOfPlayerByIndex(user.id, game.getIconItemToId(reaction.emoji.name)); // <-- L·∫•y ID c·ªßa item t·ª´ icon
        break;
      case 'üçä': // Item Index 2
        item = game.getItemOfPlayerByIndex(user.id, game.getIconItemToId(reaction.emoji.name)); // <-- L·∫•y ID c·ªßa item t·ª´ icon
        break;
      case 'üçã': // Item Index 3
        item = game.getItemOfPlayerByIndex(user.id, game.getIconItemToId(reaction.emoji.name)); // <-- L·∫•y ID c·ªßa item t·ª´ icon
        break;
      case 'ü•≠': // Item Index 4
        item = game.getItemOfPlayerByIndex(user.id, game.getIconItemToId(reaction.emoji.name)); // <-- L·∫•y ID c·ªßa item t·ª´ icon
        break;

      case '‚ùå': // Close poll
        break;
      default:
        isDeletePoll = false;
        return; // Kh√¥ng x·ª≠ l√Ω emoji kh√°c
    }
    // await reaction.message.channel.send(
    //   `Poll ƒë√£ ƒë√≥ng! Ng∆∞·ªùi ƒë·∫ßu ti√™n vote l√† ${addTag(user.id)} v·ªõi l·ª±a ch·ªçn ${reaction.emoji.name}`
    // );

    // console.log(item);
    if (item !== null) {
      switch (item.name) {
        case 'ƒê√°nh √∫p':
          // CALL API USE ITEM L·∫§Y PH·∫¢N H·ªíI ƒê·ªÇ SETTING L·∫†I V√Ä TR·∫¢ L·ªúI
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçé`);
          break;
        case 'Superchat':
          // T·∫†O POLL ƒê·ªÇ TARGET 1 VTUMON V√Ä T·∫†O API H·ªéI TH√äM INFO CHO API
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçå`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'Debut 2.0':
          // T·∫†O POLL ƒê·ªÇ TARGET 1 VTUMON V√Ä T·∫†O API H·ªéI TH√äM INFO CHO API
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçá`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'C·∫Øn c√°p':
          // CALL API USE ITEM L·∫§Y PH·∫¢N H·ªíI ƒê·ªÇ SETTING L·∫†I V√Ä TR·∫¢ L·ªúI
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçâ`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'X√≥a filter':
          // CALL API USE ITEM L·∫§Y PH·∫¢N H·ªíI ƒê·ªÇ SETTING L·∫†I V√Ä TR·∫¢ L·ªúI
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçè`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'Restream':
          // T·∫†O POLL ƒê·ªÇ TARGET 1 ITEM V√Ä T·∫†O API H·ªéI TH√äM INFO CHO API
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçê`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'Subathon':
          await reaction.message.channel.send(`${addTag(user.id)}, ${item.name} kh√¥ng c·∫ßn s·ª≠ d·ª•ng! üçä`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'Tr√† s·ªØa':
          // CALL API USE ITEM L·∫§Y PH·∫¢N H·ªíI ƒê·ªÇ SETTING L·∫†I V√Ä TR·∫¢ L·ªúI
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üçã`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        case 'Outfit m·ªõi':
          // T·∫†O POLL ƒê·ªÇ TARGET 1 ELEMENT V√Ä T·∫†O API H·ªéI TH√äM INFO CHO API
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üç≠`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item 
          break;
        case 'Collab':
          // T·∫†O POLL ƒê·ªÇ TARGET 1 VTUMON V√Ä T·∫†O API H·ªéI TH√äM INFO CHO API
          await reaction.message.channel.send(`${addTag(user.id)} ƒë√£ s·ª≠ d·ª•ng ${item.name}! üç¨`);
          // Th·ª±c hi·ªán h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi item
          break;
        default:
          break;
      }
    }; // Kh√¥ng c√≥ item n√†o ƒë∆∞·ª£c ch·ªçn
    // üßπ X√≥a poll sau khi ƒë√£ x·ª≠ l√Ω
    if (isDeletePoll) {
      try {
        if (reaction.message.deletable) {
          await reaction.message.delete();
          // console.log('ƒê√£ x√≥a poll!');
        } else {
          console.warn('Kh√¥ng th·ªÉ x√≥a pollMessage: Kh√¥ng c√≥ quy·ªÅn ho·∫∑c kh√¥ng h·ª£p l·ªá.');
        }
      } catch (error) {
        console.error('L·ªói khi x√≥a poll:', error);
      }
      global.activePollId = null;
    }
  }
});

client.once('ready', () => {
  console.log(`üü¢ Bot online v·ªõi t√™n ${client.user.tag}`);
});

client.login(process.env.TOKEN);
