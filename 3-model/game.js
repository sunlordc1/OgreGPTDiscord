const { getRandomVtumons } = require('./vtumon'); // <-- import h√†m addTag
const { getrandomItems, getNameOfItemById } = require('./item'); // <-- import fake data



let player1 = {
    id: 0,         // id c·ªßa user
    items: [],      // m·∫£ng item c·ªßa player
    vtumons: [],     // m·∫£ng vtumon c·ªßa player
    currentVtumon: 0 // Vtumon hi·ªán t·∫°i
}
let player2 = {
    id: 0,         // id c·ªßa user
    items: [],      // m·∫£ng item c·ªßa player
    vtumons: [],     // m·∫£ng vtumon c·ªßa player
    currentVtumon: 0 // Vtumon hi·ªán t·∫°i
};
/**
 * 
 * @param {ID User Discord} user_id 
 * @param {Item Array} items 
 * @param {Vtumon Array} vtumons 
 * @param {integer } currentVtumon 
 * @returns {Object Player} 
 */
function createPlayer(user_id, items = [], vtumons = [], currentVtumon = 0) {
    //API L·∫•y vtumon 1 players
    // Kh√¥ng c√≥ API n√™n t·∫°m l·∫•y fake data

    // const vtumons = getRandomVtumons();
    // if (!vtumons || vtumons.length === 0) {
    //     throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c vtumon cho player');
    // }
    // const items = getrandomItems()
    // if (!items || items.length === 0) {
    //     throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c item cho player');
    // }

    return {
        id: user_id,         // id c·ªßa user
        items: [...items],
        vtumons: [...vtumons],
        currentVtumon: currentVtumon // Vtumon hi·ªán t·∫°i
    };
}
let turn = 1;
let query_command = {
    action: 'action',
    player_id: 1,
    type: '', // lo·∫°i thao t√°c (skill, item, swap, skip)
    type_id: '', // Id c·ªßa type  skill th√¨ l√† id c·ªßa skill, item th√¨ l√† id c·ªßa item, swap th√¨ l√† id c·ªßa vtumon 
    target_id: '' // Id c·ªßa ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u (n·∫øu c√≥), v√≠ d·ª•: id c·ªßa vtumon ƒë·ªëi th·ªß khi swap
}

let item_icons = ['üçè', 'ü•ï', 'üçä', 'üçã', 'ü•≠']
let vtumon_icons = ['üê±', 'ü¶á', 'ü¶ä']
let skill_icons = ['üåÄ', 'üó°Ô∏è', 'üõ°Ô∏è', 'üí•']
module.exports = {
    get player1() { return player1; },
    get player2() { return player2; },
    get turn() { return turn; },
    get item_icons() { return item_icons; },
    get vtumon_icons() { return vtumon_icons; },
    get skill_icons() { return skill_icons; },
    get query_command() { return query_command; },
    isNotHavePlayerData() {
        if (player1.id == 0 || player2.id == 0) {
            return true
        }
        return false
    }
    ,
    /**
     * 
     * @returns T√™n c·ªßa type_id d·ª±a theo type ƒëang c√≥
     */
    getNameTypeIdQueryCommand() {
        switch (query_command.type) {
            case 'item':
                return getNameOfItemById(query_command.type_id)
            case 'swap':
                return ''
            case 'skill':
                return ''
            default:
                return ''
        }
    },
    /**
     * L·∫•y ra vtumon hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng c·ªßa current player
     * @returns 
     */
    getCurrentVtumon() {
        let currentPlayer = this.getCurrentPlayer()
        console.log(currentPlayer)
        return currentPlayer.vtumons[currentPlayer.currentVtumon]
    },
    /**
     * Thi·∫øt l·∫≠p target_id cho query_command
     * @param {string} target_id - ID c·ªßa ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u (target_id)
     */
    setTargetIdQueryCommand(target_id) {
        query_command.target_id = target_id; // Thi·∫øt l·∫≠p target_id cho query_command
    },
    /**
     * Thi·∫øt l·∫≠p type_id cho query_command
     * @param {string} type_id - ID c·ªßa lo·∫°i thao t√°c (type_id)
     */
    setTypeIdQueryCommand(type_id) {
        query_command.type_id = type_id;
    },
    /**
     * Thi·∫øt l·∫≠p action cho query_command
     * @param {string} action - H√†nh ƒë·ªông (action)
     */
    setTypeQueryCommand(type) {
        query_command.type = type;
        query_command.type_id = -1; // Reset type_id khi thay ƒë·ªïi type
    },

    /**
     * Thi·∫øt l·∫≠p player1 v·ªõi ID
     * @param {string} id - ID c·ªßa ng∆∞·ªùi d√πng
     */
    setPlayer1(id, items = [], vtumons = [], currentVtumon = 0) { player1 = createPlayer(id, items, vtumons, currentVtumon); },
    /**
     * Thi·∫øt l·∫≠p player2 v·ªõi ID
     * @param {string} id - ID c·ªßa ng∆∞·ªùi d√πng
     */
    setPlayer2(id, items = [], vtumons = [], currentVtumon = 0) { player2 = createPlayer(id, items, vtumons, currentVtumon); },
    /**
     * Thi·∫øt l·∫≠p l∆∞·ª£t ch∆°i
     * @param {number} value - Gi√° tr·ªã m·ªõi c·ªßa l∆∞·ª£t (1 ho·∫∑c 2)
     */
    setTurn(value) { if (value === 1 || value === 2) turn = value; },
    /**
     * L·∫•y player hi·ªán t·∫°i d·ª±a tr√™n l∆∞·ª£t
     * @returns {Object} - Tr·∫£ v·ªÅ player hi·ªán t·∫°i (player1 ho·∫∑c player2)
     */
    getCurrentPlayer() { return turn === 1 ? player1 : player2; },
    /**
     * L·∫•y player theo ID
     * @param {string} id - ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {Object|null} - Tr·∫£ v·ªÅ player t∆∞∆°ng ·ª©ng ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    getPlayerById(id) {
        if (player1 && player1.id === id) return player1;
        if (player2 && player2.id === id) return player2;
        return null;
    },
    /**
     * L·∫•y player theo index (1 ho·∫∑c 2)
     * @param {number} index - Ch·ªâ s·ªë c·ªßa player (1 ho·∫∑c 2)
     * @returns {Object|null} - Tr·∫£ v·ªÅ player t∆∞∆°ng ·ª©ng ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    getPlayerByIndex(index) {
        if (index === 1) return player1;
        if (index === 2) return player2;
        return null;
    },
    /**
     * Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† player1 hay kh√¥ng
     * @param {string} user_id - ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {boolean} - Tr·∫£ v·ªÅ true n·∫øu l√† player1, false n·∫øu kh√¥ng
     */
    isPlayer1(user_id) { return player1 && player1.id === user_id; },
    /**
     * Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† player2 hay kh√¥ng
     * @param {string} user_id - ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {boolean} - Tr·∫£ v·ªÅ true n·∫øu l√† player2, false n·∫øu kh√¥ng
    */
    isPlayer2(user_id) { return player2 && player2.id === user_id; },
    /**
     * Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† player hay kh√¥ng
     * @param {string} user_id - ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {boolean} - Tr·∫£ v·ªÅ true n·∫øu l√† player, false n·∫øu kh√¥ng
     */
    isPlayer(user_id) { return this.isPlayer1(user_id) || this.isPlayer2(user_id); },
    /**
     * Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† l∆∞·ª£t c·ªßa player hay kh√¥ng
     * @param {string} user_id - ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {boolean} - Tr·∫£ v·ªÅ true n·∫øu l√† l∆∞·ª£t c·ªßa player, false n·∫øu kh√¥ng
     */
    isTurnOfPlayer(user_id) {
        return (turn === 1 && this.isPlayer1(user_id)) || (turn === 2 && this.isPlayer2(user_id));
    },
    /**
     * L·∫•y list item c·ªßa player th√¥ng qua discord user_id üçì
     * @param {string} user_id - T√™n ng∆∞·ªùi d√πng
     * @returns {Array} - M·∫£ng list item c·ªßa ng∆∞·ªùi ch∆°i
     */
    getItemOfPlayer(user_id) {
        const player = this.getPlayerById(user_id);
        if (!player) return null;
        return player.items;
    },
    /**
     * L·∫•y t√™n c·ªßa item t·ª´ ID
     * @param {string} user_id - ID discord c·ªßa ng∆∞·ªùi d√πng
     * @param {number} item_id - ID c·ªßa item
     * @return {string|null} - T√™n c·ªßa item ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     * */
    getItemIdToName(user_id, item_id) {
        const player = this.getPlayerById(user_id);
        if (!player) return null;
        const item = player.items.find(item => item.id === item_id);
        return item ? item.name : null;
    },
    /**
     * 
     * @param {number} user_id 
     * @param {number} index 
     * @returns {object} vtumon theo index ƒë∆∞·ª£c l·∫•y t·ª´ icon trong poll
     */
    getVtumonOfPlayerByIndex(user_id, index) {
        const player = this.getPlayerById(user_id); // L·∫•y player theo user_id
        if (!player || !player.vtumons || index < 0 || index >= player.vtumons.length) {
            return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y player ho·∫∑c index kh√¥ng h·ª£p l·ªá 
        }
        return player.vtumons[index]; // Tr·∫£ v·ªÅ item t·∫°i index t∆∞∆°ng ·ª©ng
    },
    /**
     * 
     * @param {number} user_id 
     * @returns {array[object]} vtumon list
     */
    getVtumonOfPlayer(user_id) {
        const player = this.getPlayerById(user_id);
        if (!player) return null;
        return player.vtumons;
    },
    /**
    * L·∫•y ID c·ªßa item t·ª´ bi·∫øn item_icons
    * @param {emoji|string} icon - Bi·ªÉu t∆∞·ª£ng c·ªßa item
    * @returns {number} - ID icon , s·ª≠ d·ª•ng id n√†y ƒë·ªÉ l·∫•y ra id c·ªßa item theo index t∆∞∆°ng ·ª©ng
    */
    getIconItemToId(icon) {
        return this.item_icons.indexOf(icon);
    },
    /**
    * L·∫•y ID c·ªßa item t·ª´ bi·∫øn item_icons
    * @param {emoji|string} icon - Bi·ªÉu t∆∞·ª£ng c·ªßa skill
    * @returns {number} - ID icon , s·ª≠ d·ª•ng id n√†y ƒë·ªÉ l·∫•y ra id c·ªßa item theo index t∆∞∆°ng ·ª©ng
    */
    getIconSkillToId(icon) {
        return this.skill_icons.indexOf(icon);
    },
    /**
     * 
     * @param {emoji|string} icon 
     * @returns {number} - ID icon , s·ª≠ d·ª•ng id n√†y ƒë·ªÉ l·∫•y ra id c·ªßa vtumon theo index t∆∞∆°ng ·ª©ng
     */
    getIconVtumonToId(icon) {
        return this.vtumon_icons.indexOf(icon);
    },
    /**
     * L·∫•y item c·ªßa player theo index
     * @param {string} user_id - ID c·ªßa ng∆∞·ªùi d√πng          
     * @param {number} index - Ch·ªâ s·ªë c·ªßa item trong m·∫£ng items
     * @returns {Object|null} - Tr·∫£ v·ªÅ item t·∫°i index t∆∞∆°ng ·ª©ng ho·∫∑c null
     * */
    getItemOfPlayerByIndex(user_id, index) {
        const player = this.getPlayerById(user_id); // L·∫•y player theo user_id
        if (!player || !player.items || index < 0 || index >= player.items.length) {
            return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y player ho·∫∑c index kh√¥ng h·ª£p l·ªá 
        }
        return player.items[index]; // Tr·∫£ v·ªÅ item t·∫°i index t∆∞∆°ng ·ª©ng
    },
    /**
     * Thi·∫øt l·∫≠p l·∫°i gi√° tr·ªã ban ƒë·∫ßu query_command v·ªõi action, type v√† type_id
     * @param {string} action - H√†nh ƒë·ªông (action)
     * @param {string} type - Lo·∫°i thao t√°c (type)
     * @param {string} type_id - T√™n c·ªßa lo·∫°i thao t√°c (type_id)
     * @param {string} target_id - T√™n c·ªßa lo·∫°i thao t√°c (type_id)
     */
    resetQueryCommand() {
        query_command = {
            action: 'action',
            player_id: turn,
            type: '', // lo·∫°i thao t√°c (skill, item, swap, skip)
            type_id: '', // Id c·ªßa type  skill th√¨ l√† id c·ªßa skill, item th√¨ l√† id c·ªßa item, swap th√¨ l√† id c·ªßa vtumon 
            target_id: '' // Id c·ªßa ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u (n·∫øu c√≥), v√≠ d·ª•: id c·ªßa vtumon ƒë·ªëi th·ªß khi swap
        };
    },
    /**
     * Thi·∫øt l·∫≠p l·∫°i gi√° tr·ªã ban ƒë·∫ßu query_command v·ªõi action, type v√† type_id
     * @param {string} action - H√†nh ƒë·ªông (action)
     * @param {string} type - Lo·∫°i thao t√°c (type)
     * @param {string} type_id - T√™n c·ªßa lo·∫°i thao t√°c (type_id)
     * @param {string} target_id - T√™n c·ªßa lo·∫°i thao t√°c (type_id)
     */
    setQueryCommand(obj) {
        query_command = obj
    },
    /**
     * Reset game state
     * @returns {void}
     */
    reset() { player1 = createPlayer(0); player2 = createPlayer(0); turn = 1; this.resetQueryCommand() },
};